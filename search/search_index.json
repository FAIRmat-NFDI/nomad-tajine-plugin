{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to the <code>nomad-tajine-plugin</code> documentation","text":"<p>An example plugin showing how NOMAD can be used outside of material science for curating food recipes.</p> <p>Attention</p> <p>This is the documentation for the NOMAD plugin for food recipes, developed as part of the nomad-tajine hackathon. It provides a guide on how to use the plugin effectively to manage and share food recipe data in NOMAD. This plugin was developed to demonstrate that NOMAD Oasis can serve as a domain-agnostic data management platform. As part of this demonstration, we created a dedicated instance of Oasis \u2014 NOMAD Tajine Example Oasis \u2014 and this accompanying plugin, nomad-tajine-plugin.</p> <p>We hope this documentation helps you enjoy exploring and using the nomad-tajine-plugin. This plugin was created as a fun and creative experiment to show how NOMAD can be customized beyond science, in this case, to curate and share delicious food recipes! For questions or feedback, feel free to open an issue in the GitHub repository, join the NOMAD Discord channel, or reach out directly to the FAIRmat project.</p> <p>Last updated: 25.10.2025 v1.0</p>"},{"location":"index.html#tutorial","title":"Tutorial","text":"<p>The tutorial provides quick steps to start using the plugin:</p> <ul> <li>Create recipe entries</li> <li>Search recipes</li> </ul>"},{"location":"index.html#how-to-guides","title":"How-to guides","text":"<p>How-to guides provide step-by-step instructions for a wide range of tasks, with the overarching topics:</p> <ul> <li>Install this plugin</li> <li>Contribute to this plugin</li> <li>Contribute to the documentation</li> </ul>"},{"location":"index.html#explanation","title":"Explanation","text":"<p>The explanation section provides background knowledge on this plugin.</p>"},{"location":"index.html#reference","title":"Reference","text":"<p>The reference section includes schema documentation and a glossary of used terms.</p>"},{"location":"index.html#about-nomad","title":"About NOMAD","text":"<p>NOMAD  is an open-source data management platform tailored for materials science, designed to follow the FAIR principles. It offers a robust framework for managing and sharing materials data in a standardized and interoperable manner. To learn more about NOMAD, visit the official homepage.</p>"},{"location":"explanation/explanation.html","title":"Explanation","text":"<p>This plugin implements schemas for structuring data for ingredients, recipes, cooking steps, and an ELN for scaling existing recipes for different number of servings. Read more about the implementations here.</p>"},{"location":"how_to/contribute_to_the_documentation.html","title":"Contribute to the documentation","text":"<p>The steps are the same as briefly mentioned here.</p> <p>Noteworthy is that the docs are Markdown and deployed using MkDocs.</p> <p>After you modified or added to the docs, preview them locally for a final sanity check:</p> <pre><code>uv run mkdocs serve\n</code></pre>"},{"location":"how_to/contribute_to_this_plugin.html","title":"Contribute to This Plugin","text":"<p>The plugin is available on our GitHub here. You can clone it on your local and test your changes.</p> <p>Similar to many other open-source projects, here are the concise main steps you may want to take: Fork the repository \u2192 create an issue \u2192 create a feature branch \u2192 commit changes \u2192 open a PR.</p> <p>Keep changes minimal and documented; reference existing issues where possible.</p>"},{"location":"how_to/install_this_plugin.html","title":"Install This Plugin","text":"<p>Note</p> <p>The NOMAD Tajine Example Oasis comes with <code>nomad-tajine-plugin</code> preinstalled. You can use your existing NOMAD account to create and explore recipes on this Oasis.</p> <p>If you would like to install the plugin on your NOMAD Oasis instance, here's the official guide on How to install plugins into a NOMAD Oasis.</p> <p>In short, you need to declare the plugin in the <code>pyproject.toml</code> file of your Oasis distribution repository. This involves adding the plugin package to the <code>[project.optional-dependencies]</code> table under <code>plugins</code>:</p> <pre><code>[project.optional-dependencies]\nplugins = [\n  ...\n  \"nomad-tajine-plugin\",\n]\n</code></pre>"},{"location":"reference/references.html","title":"Glossary","text":"<p>Info</p> <p>Please refer to the glossary in the NOMAD documentation to find definitions and explanations for specific technical terms used throughout the NOMAD software.</p>"},{"location":"reference/references.html#nomad-metainfo-browser","title":"NOMAD Metainfo Browser","text":"<p>Allows users to explore all available schemas, including their sections, values, and references, in a detailed and interactive manner.</p> <p>It can be accessed through the Analyze &gt; The NOMAD Metainfo tab in your NOMAD installation. Select the source to be <code>nomad_tajine_plugin</code> to explore the schemas defined by this plugin.</p>"},{"location":"reference/schemas.html","title":"Schemas","text":""},{"location":"reference/schemas.html#ingredient","title":"Ingredient","text":"<p>description: An ingredient used in cooking recipes.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.Entity</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type density <code>float</code> unit=<code>gram / liter</code>, default=<code>1000.0</code> weight_per_piece <code>float</code> unit=<code>gram</code>, default=<code>50.0</code> diet_type <code>['ambiguous', 'omnivorous', 'vegan', 'vegetarian']</code> calories_per_100_g <code>float</code> Nutrients per 100 g for this ingredient type imported from USDA.unit=<code>kilocalorie</code> fat_per_100_g <code>float</code> Nutrients per 100 g for this ingredient type imported from USDA.unit=<code>gram</code> protein_per_100_g <code>float</code> Nutrients per 100 g for this ingredient type imported from USDA.unit=<code>gram</code> carbohydrates_per_100_g <code>float</code> Nutrients per 100 g for this ingredient type imported from USDA.unit=<code>gram</code> fdc_id <code>int</code> ndb_id <code>int</code> <p>normalization without further documentation</p>"},{"location":"reference/schemas.html#ingredientamount","title":"IngredientAmount","text":"<p>description: Represents the amount of an ingredient in a recipe.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.EntityReference</code></p> <p>properties:</p> name type name <code>str</code> A short descriptive name for the role of this reference. mass <code>float</code> The mass of the ingredientunit=<code>gram</code> lab_id <code>str</code> An ID string that is unique at least for the lab that produced this data. reference <code>Ingredient</code> A reference to a ingredient type entry. diet_type <code>['ambiguous', 'omnivorous', 'vegan', 'vegetarian']</code> calories <code>float</code> Total calories of this ingredient.unit=<code>kilocalorie</code> fat <code>float</code> Total fat of this ingredient.unit=<code>gram</code> protein <code>float</code> Total proteins of this ingredient.unit=<code>gram</code> carbohydrates <code>float</code> Total carbohydrates of this ingredient.unit=<code>gram</code> <p>normalization: </p> <p>For the given ingredient name or ID, fetches the corresponding Ingredient entry. If not found, creates a new Ingredient entry. Converts the quantity to SI units based on the unit and ingredient properties like density or weight per piece.</p>"},{"location":"reference/schemas.html#ingredientvolume","title":"IngredientVolume","text":"<p>inherits from: <code>IngredientAmount</code></p> <p>properties:</p> name type volume <code>float</code> The volume of the ingredient that should be used.unit=<code>milliliter</code> mass <code>float</code> The mass of the ingredient that should be used.unit=<code>gram</code> <p>normalization without further documentation</p>"},{"location":"reference/schemas.html#ingredientpiece","title":"IngredientPiece","text":"<p>inherits from: <code>IngredientAmount</code></p> <p>properties:</p> name type pieces <code>float</code> The number of pieces of the ingredient that should be used. mass <code>float</code> The mass of the ingredient that should be used.unit=<code>gram</code> <p>normalization without further documentation</p>"},{"location":"reference/schemas.html#tool","title":"Tool","text":"<p>description: A kitchen tool or utensil used in cooking.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type name <code>str</code> type <code>str</code> description <code>str</code>"},{"location":"reference/schemas.html#recipestep","title":"RecipeStep","text":"<p>description: A single step in a cooking recipe.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type duration <code>float</code> unit=<code>minute</code> instruction <code>str</code> tools <code>Tool</code> sub-section, repeats ingredients <code>IngredientAmount</code> sub-section, repeats"},{"location":"reference/schemas.html#heatingcoolingstep","title":"HeatingCoolingStep","text":"<p>description: A recipe step that involves heating or cooling to a specific temperature.</p> <p>inherits from: <code>RecipeStep</code></p> <p>properties:</p> name type temperature <code>float</code> unit=<code>degree_Celsius</code>, default=<code>20.0</code>"},{"location":"reference/schemas.html#recipe","title":"Recipe","text":"<p>description: A schema representing a cooking recipe with ingredients, tools, and steps.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.BaseSection</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type name <code>str</code> A short human readable and descriptive name. duration <code>float</code> unit=<code>minute</code> authors <code>str</code> difficulty <code>['easy', 'hard', 'medium']</code> number_of_servings <code>int</code> summary <code>str</code> cuisine <code>str</code> diet_type <code>['ambiguous', 'omnivorous', 'vegan', 'vegetarian']</code> calories <code>float</code> Total calories of this ingredient.unit=<code>kilocalorie</code> fat <code>float</code> Total fat of this recipe.unit=<code>gram</code> protein <code>float</code> Total proteins of this recipe.unit=<code>gram</code> carbohydrates <code>float</code> Total carbohydrates of this recipe.unit=<code>gram</code> calories_per_serving <code>float</code> Calories per serving.unit=<code>kilocalorie</code> fat_per_serving <code>float</code> Fats per serving.unit=<code>gram</code> protein_per_serving <code>float</code> Proteins per serving.unit=<code>gram</code> carbohydrates_per_serving <code>float</code> Carbohydrates per serving.unit=<code>gram</code> _normalization_delay <code>float</code> default=<code>0.0</code> tools <code>Tool</code> sub-section, repeats steps <code>RecipeStep</code> sub-section, repeats ingredients <code>IngredientAmount</code> sub-section, repeats <p>normalization: </p> <p>Collects all ingredients and tools from steps and adds them to the recipe's ingredients and tools lists.</p>"},{"location":"reference/schemas.html#recipescaler","title":"RecipeScaler","text":"<p>description: Scale a recipe for different serving sizes</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.BaseSection</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type original_recipe <code>Recipe</code> Reference to the original recipe to be scaled desired_servings <code>int</code> Number of servings desired for the scaled recipe scaled_recipe <code>Recipe</code> The resulting scaled recipe <p>normalization: </p> <p>Uses the referenced original recipe entry and specified desired servings to create a scaled recipe entry.</p>"},{"location":"tutorial/tutorial.html","title":"Tutorial","text":""},{"location":"tutorial/tutorial.html#create-recipe-entries-manually","title":"Create recipe entries manually","text":"<p>It is similar to using other built-in ELN templates. You simply need to choose the Recipe as your Built-in schema.</p> <p>You can follow these concise steps:</p> <ol> <li> <p>In the GUI: PUBLISH \u2192 Uploads \u2192 CREATE A NEW UPLOAD \u2192 CREATE FROM SCHEMA \u2192 select Built-in schema \u2192 Recipe (entry type provided by the plugin).</p> </li> <li> <p>Fill the main fields: Name, Cuisine, Number of servings, etc.</p> </li> <li> <p>Choose ingredients from already existing entries or simply add them in using the designated fields (name, amount, unit) and Cooking steps (ordered steps).</p> </li> </ol>"},{"location":"tutorial/tutorial.html#search-recipes","title":"Search recipes","text":"<p>The easiest is to use NOMAD Tajine App. You can find it in the EXPLORE menu under USE CASES category.</p> <p>Feel free to use the already existing dashboard or modify it to your search criteria.</p>"}]}